/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const BME280_HUMIDITY_DATA_SIZE: u32 = 2;
pub const BME280_TEMPERATURE_DATA_SIZE: u32 = 3;
pub const BME280_PRESSURE_DATA_SIZE: u32 = 3;
pub const BME280_DATA_FRAME_SIZE: u32 = 8;
pub const BME280_I2C_ADDRESS1: u32 = 118;
pub const BME280_I2C_ADDRESS2: u32 = 119;
pub const BME280_SLEEP_MODE: u32 = 0;
pub const BME280_FORCED_MODE: u32 = 1;
pub const BME280_NORMAL_MODE: u32 = 3;
pub const BME280_SOFT_RESET_CODE: u32 = 182;
pub const BME280_SHIFT_BIT_POSITION_BY_01_BIT: u32 = 1;
pub const BME280_SHIFT_BIT_POSITION_BY_02_BITS: u32 = 2;
pub const BME280_SHIFT_BIT_POSITION_BY_03_BITS: u32 = 3;
pub const BME280_SHIFT_BIT_POSITION_BY_04_BITS: u32 = 4;
pub const BME280_SHIFT_BIT_POSITION_BY_07_BITS: u32 = 7;
pub const BME280_SHIFT_BIT_POSITION_BY_08_BITS: u32 = 8;
pub const BME280_SHIFT_BIT_POSITION_BY_10_BITS: u32 = 10;
pub const BME280_SHIFT_BIT_POSITION_BY_11_BITS: u32 = 11;
pub const BME280_SHIFT_BIT_POSITION_BY_12_BITS: u32 = 12;
pub const BME280_SHIFT_BIT_POSITION_BY_13_BITS: u32 = 13;
pub const BME280_SHIFT_BIT_POSITION_BY_14_BITS: u32 = 14;
pub const BME280_SHIFT_BIT_POSITION_BY_15_BITS: u32 = 15;
pub const BME280_SHIFT_BIT_POSITION_BY_16_BITS: u32 = 16;
pub const BME280_SHIFT_BIT_POSITION_BY_17_BITS: u32 = 17;
pub const BME280_SHIFT_BIT_POSITION_BY_18_BITS: u32 = 18;
pub const BME280_SHIFT_BIT_POSITION_BY_19_BITS: u32 = 19;
pub const BME280_SHIFT_BIT_POSITION_BY_20_BITS: u32 = 20;
pub const BME280_SHIFT_BIT_POSITION_BY_25_BITS: u32 = 25;
pub const BME280_SHIFT_BIT_POSITION_BY_31_BITS: u32 = 31;
pub const BME280_SHIFT_BIT_POSITION_BY_33_BITS: u32 = 33;
pub const BME280_SHIFT_BIT_POSITION_BY_35_BITS: u32 = 35;
pub const BME280_SHIFT_BIT_POSITION_BY_47_BITS: u32 = 47;
pub const BME280_PRESSURE_TEMPERATURE_CALIB_DATA_LENGTH: u32 = 26;
pub const BME280_HUMIDITY_CALIB_DATA_LENGTH: u32 = 7;
pub const BME280_GEN_READ_WRITE_DATA_LENGTH: u32 = 1;
pub const BME280_HUMIDITY_DATA_LENGTH: u32 = 2;
pub const BME280_TEMPERATURE_DATA_LENGTH: u32 = 3;
pub const BME280_PRESSURE_DATA_LENGTH: u32 = 3;
pub const BME280_ALL_DATA_FRAME_LENGTH: u32 = 8;
pub const BME280_INIT_VALUE: u32 = 0;
pub const BME280_INVALID_DATA: u32 = 0;
pub const BME280_OVERSAMP_SKIPPED: u32 = 0;
pub const BME280_OVERSAMP_1X: u32 = 1;
pub const BME280_OVERSAMP_2X: u32 = 2;
pub const BME280_OVERSAMP_4X: u32 = 3;
pub const BME280_OVERSAMP_8X: u32 = 4;
pub const BME280_OVERSAMP_16X: u32 = 5;
pub const BME280_ULTRALOWPOWER_MODE: u32 = 0;
pub const BME280_LOWPOWER_MODE: u32 = 1;
pub const BME280_STANDARDRESOLUTION_MODE: u32 = 2;
pub const BME280_HIGHRESOLUTION_MODE: u32 = 3;
pub const BME280_ULTRAHIGHRESOLUTION_MODE: u32 = 4;
pub const BME280_ULTRALOWPOWER_OSRS_P: u32 = 1;
pub const BME280_ULTRALOWPOWER_OSRS_T: u32 = 1;
pub const BME280_LOWPOWER_OSRS_P: u32 = 2;
pub const BME280_LOWPOWER_OSRS_T: u32 = 1;
pub const BME280_STANDARDRESOLUTION_OSRS_P: u32 = 3;
pub const BME280_STANDARDRESOLUTION_OSRS_T: u32 = 1;
pub const BME280_HIGHRESOLUTION_OSRS_P: u32 = 4;
pub const BME280_HIGHRESOLUTION_OSRS_T: u32 = 1;
pub const BME280_ULTRAHIGHRESOLUTION_OSRS_P: u32 = 5;
pub const BME280_ULTRAHIGHRESOLUTION_OSRS_T: u32 = 2;
pub const BME280_CALIB_DATA_SIZE: u32 = 26;
pub const BME280_TEMPERATURE_MSB_DATA: u32 = 0;
pub const BME280_TEMPERATURE_LSB_DATA: u32 = 1;
pub const BME280_TEMPERATURE_XLSB_DATA: u32 = 2;
pub const BME280_PRESSURE_MSB_DATA: u32 = 0;
pub const BME280_PRESSURE_LSB_DATA: u32 = 1;
pub const BME280_PRESSURE_XLSB_DATA: u32 = 2;
pub const BME280_HUMIDITY_MSB_DATA: u32 = 0;
pub const BME280_HUMIDITY_LSB_DATA: u32 = 1;
pub const BME280_DATA_FRAME_PRESSURE_MSB_BYTE: u32 = 0;
pub const BME280_DATA_FRAME_PRESSURE_LSB_BYTE: u32 = 1;
pub const BME280_DATA_FRAME_PRESSURE_XLSB_BYTE: u32 = 2;
pub const BME280_DATA_FRAME_TEMPERATURE_MSB_BYTE: u32 = 3;
pub const BME280_DATA_FRAME_TEMPERATURE_LSB_BYTE: u32 = 4;
pub const BME280_DATA_FRAME_TEMPERATURE_XLSB_BYTE: u32 = 5;
pub const BME280_DATA_FRAME_HUMIDITY_MSB_BYTE: u32 = 6;
pub const BME280_DATA_FRAME_HUMIDITY_LSB_BYTE: u32 = 7;
pub const BME280_TEMPERATURE_CALIB_DIG_T1_LSB: u32 = 0;
pub const BME280_TEMPERATURE_CALIB_DIG_T1_MSB: u32 = 1;
pub const BME280_TEMPERATURE_CALIB_DIG_T2_LSB: u32 = 2;
pub const BME280_TEMPERATURE_CALIB_DIG_T2_MSB: u32 = 3;
pub const BME280_TEMPERATURE_CALIB_DIG_T3_LSB: u32 = 4;
pub const BME280_TEMPERATURE_CALIB_DIG_T3_MSB: u32 = 5;
pub const BME280_TEMPERATURE_CALIB_DIG_T1_LSB_REG: u32 = 136;
pub const BME280_TEMPERATURE_CALIB_DIG_T1_MSB_REG: u32 = 137;
pub const BME280_TEMPERATURE_CALIB_DIG_T2_LSB_REG: u32 = 138;
pub const BME280_TEMPERATURE_CALIB_DIG_T2_MSB_REG: u32 = 139;
pub const BME280_TEMPERATURE_CALIB_DIG_T3_LSB_REG: u32 = 140;
pub const BME280_TEMPERATURE_CALIB_DIG_T3_MSB_REG: u32 = 141;
pub const BME280_PRESSURE_CALIB_DIG_P1_LSB_REG: u32 = 142;
pub const BME280_PRESSURE_CALIB_DIG_P1_MSB_REG: u32 = 143;
pub const BME280_PRESSURE_CALIB_DIG_P2_LSB_REG: u32 = 144;
pub const BME280_PRESSURE_CALIB_DIG_P2_MSB_REG: u32 = 145;
pub const BME280_PRESSURE_CALIB_DIG_P3_LSB_REG: u32 = 146;
pub const BME280_PRESSURE_CALIB_DIG_P3_MSB_REG: u32 = 147;
pub const BME280_PRESSURE_CALIB_DIG_P4_LSB_REG: u32 = 148;
pub const BME280_PRESSURE_CALIB_DIG_P4_MSB_REG: u32 = 149;
pub const BME280_PRESSURE_CALIB_DIG_P5_LSB_REG: u32 = 150;
pub const BME280_PRESSURE_CALIB_DIG_P5_MSB_REG: u32 = 151;
pub const BME280_PRESSURE_CALIB_DIG_P6_LSB_REG: u32 = 152;
pub const BME280_PRESSURE_CALIB_DIG_P6_MSB_REG: u32 = 153;
pub const BME280_PRESSURE_CALIB_DIG_P7_LSB_REG: u32 = 154;
pub const BME280_PRESSURE_CALIB_DIG_P7_MSB_REG: u32 = 155;
pub const BME280_PRESSURE_CALIB_DIG_P8_LSB_REG: u32 = 156;
pub const BME280_PRESSURE_CALIB_DIG_P8_MSB_REG: u32 = 157;
pub const BME280_PRESSURE_CALIB_DIG_P9_LSB_REG: u32 = 158;
pub const BME280_PRESSURE_CALIB_DIG_P9_MSB_REG: u32 = 159;
pub const BME280_HUMIDITY_CALIB_DIG_H1_REG: u32 = 161;
pub const BME280_HUMIDITY_CALIB_DIG_H2_LSB_REG: u32 = 225;
pub const BME280_HUMIDITY_CALIB_DIG_H2_MSB_REG: u32 = 226;
pub const BME280_HUMIDITY_CALIB_DIG_H3_REG: u32 = 227;
pub const BME280_HUMIDITY_CALIB_DIG_H4_MSB_REG: u32 = 228;
pub const BME280_HUMIDITY_CALIB_DIG_H4_LSB_REG: u32 = 229;
pub const BME280_HUMIDITY_CALIB_DIG_H5_MSB_REG: u32 = 230;
pub const BME280_HUMIDITY_CALIB_DIG_H6_REG: u32 = 231;
pub const BME280_CHIP_ID_REG: u32 = 208;
pub const BME280_RST_REG: u32 = 224;
pub const BME280_STAT_REG: u32 = 243;
pub const BME280_CTRL_MEAS_REG: u32 = 244;
pub const BME280_CTRL_HUMIDITY_REG: u32 = 242;
pub const BME280_CONFIG_REG: u32 = 245;
pub const BME280_PRESSURE_MSB_REG: u32 = 247;
pub const BME280_PRESSURE_LSB_REG: u32 = 248;
pub const BME280_PRESSURE_XLSB_REG: u32 = 249;
pub const BME280_TEMPERATURE_MSB_REG: u32 = 250;
pub const BME280_TEMPERATURE_LSB_REG: u32 = 251;
pub const BME280_TEMPERATURE_XLSB_REG: u32 = 252;
pub const BME280_HUMIDITY_MSB_REG: u32 = 253;
pub const BME280_HUMIDITY_LSB_REG: u32 = 254;
pub const BME280_STAT_REG_MEASURING__POS: u32 = 3;
pub const BME280_STAT_REG_MEASURING__MSK: u32 = 8;
pub const BME280_STAT_REG_MEASURING__LEN: u32 = 1;
pub const BME280_STAT_REG_MEASURING__REG: u32 = 243;
pub const BME280_STAT_REG_IM_UPDATE__POS: u32 = 0;
pub const BME280_STAT_REG_IM_UPDATE__MSK: u32 = 1;
pub const BME280_STAT_REG_IM_UPDATE__LEN: u32 = 1;
pub const BME280_STAT_REG_IM_UPDATE__REG: u32 = 243;
pub const BME280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE__POS: u32 = 5;
pub const BME280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE__MSK: u32 = 224;
pub const BME280_CTRL_MEAS_REG_OVERSAMP_TEMPERATURE__LEN: u32 = 3;
pub type __u_char = cty::c_uchar;
pub type __u_short = cty::c_ushort;
pub type __u_int = cty::c_uint;
pub type __u_long = cty::c_ulong;
pub type __int8_t = cty::c_schar;
pub type __uint8_t = cty::c_uchar;
pub type __int16_t = cty::c_short;
pub type __uint16_t = cty::c_ushort;
pub type __int32_t = cty::c_int;
pub type __uint32_t = cty::c_uint;
pub type __int64_t = cty::c_long;
pub type __uint64_t = cty::c_ulong;
pub type __quad_t = cty::c_long;
pub type __u_quad_t = cty::c_ulong;
pub type __intmax_t = cty::c_long;
pub type __uintmax_t = cty::c_ulong;
pub type __dev_t = cty::c_ulong;
pub type __uid_t = cty::c_uint;
pub type __gid_t = cty::c_uint;
pub type __ino_t = cty::c_ulong;
pub type __ino64_t = cty::c_ulong;
pub type __mode_t = cty::c_uint;
pub type __nlink_t = cty::c_ulong;
pub type __off_t = cty::c_long;
pub type __off64_t = cty::c_long;
pub type __pid_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [cty::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = cty::c_long;
pub type __rlim_t = cty::c_ulong;
pub type __rlim64_t = cty::c_ulong;
pub type __id_t = cty::c_uint;
pub type __time_t = cty::c_long;
pub type __useconds_t = cty::c_uint;
pub type __suseconds_t = cty::c_long;
pub type __daddr_t = cty::c_int;
pub type __key_t = cty::c_int;
pub type __clockid_t = cty::c_int;
pub type __timer_t = *mut cty::c_void;
pub type __blksize_t = cty::c_long;
pub type __blkcnt_t = cty::c_long;
pub type __blkcnt64_t = cty::c_long;
pub type __fsblkcnt_t = cty::c_ulong;
pub type __fsblkcnt64_t = cty::c_ulong;
pub type __fsfilcnt_t = cty::c_ulong;
pub type __fsfilcnt64_t = cty::c_ulong;
pub type __fsword_t = cty::c_long;
pub type __ssize_t = cty::c_long;
pub type __syscall_slong_t = cty::c_long;
pub type __syscall_ulong_t = cty::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut cty::c_char;
pub type __intptr_t = cty::c_long;
pub type __socklen_t = cty::c_uint;
pub type __sig_atomic_t = cty::c_int;
pub type int_least8_t = cty::c_schar;
pub type int_least16_t = cty::c_short;
pub type int_least32_t = cty::c_int;
pub type int_least64_t = cty::c_long;
pub type uint_least8_t = cty::c_uchar;
pub type uint_least16_t = cty::c_ushort;
pub type uint_least32_t = cty::c_uint;
pub type uint_least64_t = cty::c_ulong;
pub type int_fast8_t = cty::c_schar;
pub type int_fast16_t = cty::c_long;
pub type int_fast32_t = cty::c_long;
pub type int_fast64_t = cty::c_long;
pub type uint_fast8_t = cty::c_uchar;
pub type uint_fast16_t = cty::c_ulong;
pub type uint_fast32_t = cty::c_ulong;
pub type uint_fast64_t = cty::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type INT8U = cty::c_uchar;
pub type INT8S = cty::c_schar;
pub type INT16U = cty::c_ushort;
pub type INT16S = cty::c_short;
pub type INT32U = cty::c_uint;
pub type INT32S = cty::c_int;
#[doc = " @brief This structure holds all device specific calibration parameters"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bme280_calibration_param_t {
    #[doc = "<calibration T1 data"]
    pub dig_T1: INT16U,
    #[doc = "<calibration T2 data"]
    pub dig_T2: INT16S,
    #[doc = "<calibration T3 data"]
    pub dig_T3: INT16S,
    #[doc = "<calibration T_FINE data"]
    pub t_fine: INT32S,
}
#[test]
fn bindgen_test_layout_bme280_calibration_param_t() {
    assert_eq!(
        ::core::mem::size_of::<bme280_calibration_param_t>(),
        12usize,
        concat!("Size of: ", stringify!(bme280_calibration_param_t))
    );
    assert_eq!(
        ::core::mem::align_of::<bme280_calibration_param_t>(),
        4usize,
        concat!("Alignment of ", stringify!(bme280_calibration_param_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<bme280_calibration_param_t>())).dig_T1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bme280_calibration_param_t),
            "::",
            stringify!(dig_T1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<bme280_calibration_param_t>())).dig_T2 as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(bme280_calibration_param_t),
            "::",
            stringify!(dig_T2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<bme280_calibration_param_t>())).dig_T3 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bme280_calibration_param_t),
            "::",
            stringify!(dig_T3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<bme280_calibration_param_t>())).t_fine as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bme280_calibration_param_t),
            "::",
            stringify!(t_fine)
        )
    );
}
#[doc = " @brief This structure holds BME280 initialization parameters"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bme280_t {
    pub cal_param: bme280_calibration_param_t,
    #[doc = "< chip id of the sensor"]
    pub chip_id: u8,
    #[doc = "< device address of the sensor"]
    pub dev_addr: u8,
    pub osrs_p: u8,
    #[doc = "< temperature over sampling"]
    pub oversamp_temperature: u8,
    #[doc = "< pressure over sampling"]
    pub oversamp_pressure: u8,
    #[doc = "< humidity over sampling"]
    pub oversamp_humidity: u8,
    #[doc = "< status of control humidity register"]
    pub ctrl_hum_reg: u8,
    #[doc = "< status of control measurement register"]
    pub ctrl_meas_reg: u8,
    #[doc = "< status of configuration register"]
    pub config_reg: u8,
}
#[test]
fn bindgen_test_layout_bme280_t() {
    assert_eq!(
        ::core::mem::size_of::<bme280_t>(),
        24usize,
        concat!("Size of: ", stringify!(bme280_t))
    );
    assert_eq!(
        ::core::mem::align_of::<bme280_t>(),
        4usize,
        concat!("Alignment of ", stringify!(bme280_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<bme280_t>())).cal_param as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bme280_t),
            "::",
            stringify!(cal_param)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<bme280_t>())).chip_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bme280_t),
            "::",
            stringify!(chip_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<bme280_t>())).dev_addr as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(bme280_t),
            "::",
            stringify!(dev_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<bme280_t>())).osrs_p as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(bme280_t),
            "::",
            stringify!(osrs_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<bme280_t>())).oversamp_temperature as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(bme280_t),
            "::",
            stringify!(oversamp_temperature)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<bme280_t>())).oversamp_pressure as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bme280_t),
            "::",
            stringify!(oversamp_pressure)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<bme280_t>())).oversamp_humidity as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(bme280_t),
            "::",
            stringify!(oversamp_humidity)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<bme280_t>())).ctrl_hum_reg as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(bme280_t),
            "::",
            stringify!(ctrl_hum_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<bme280_t>())).ctrl_meas_reg as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(bme280_t),
            "::",
            stringify!(ctrl_meas_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<bme280_t>())).config_reg as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bme280_t),
            "::",
            stringify!(config_reg)
        )
    );
}
extern "C" {
    pub fn Chip_id_read() -> u8;
}
extern "C" {
    pub fn bme280_set_soft_rst();
}
extern "C" {
    pub fn bme280_get_calib_param() -> INT8U;
}
extern "C" {
    pub fn bme280_init(data: *mut bme280_t) -> INT8U;
}
extern "C" {
    pub fn bme280_write_register(v_addr_u8: INT8U, v_data_u8: INT8U) -> INT8U;
}
extern "C" {
    pub fn bme280_read_register(v_addr_u8: INT8U) -> INT8U;
}
extern "C" {
    pub fn bme280_set_config(v_data_u8: INT8U) -> INT8U;
}
extern "C" {
    pub fn bme280_set_power_mode(v_power_mode_u8: INT8U) -> INT8U;
}
extern "C" {
    pub fn bme280_set_work_mode(v_work_mode_u8: INT8U) -> INT8U;
}
extern "C" {
    pub fn bme280_read_uncomp_temperature() -> INT32S;
}
extern "C" {
    pub fn bme280_compensate_temperature_int32_sixteen_bit_output(
        v_uncomp_temperature_s32: INT32S,
    ) -> INT16S;
}
extern "C" {
    pub fn bme280_compensate_temperature_int32(v_uncomp_temperature_s32: INT32S) -> INT32S;
}
extern "C" {
    pub fn bme280_compensate_temperature_read() -> INT32S;
}
