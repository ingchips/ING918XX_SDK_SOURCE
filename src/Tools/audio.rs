/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __u_char = cty::c_uchar;
pub type __u_short = cty::c_ushort;
pub type __u_int = cty::c_uint;
pub type __u_long = cty::c_ulong;
pub type __int8_t = cty::c_schar;
pub type __uint8_t = cty::c_uchar;
pub type __int16_t = cty::c_short;
pub type __uint16_t = cty::c_ushort;
pub type __int32_t = cty::c_int;
pub type __uint32_t = cty::c_uint;
pub type __int64_t = cty::c_long;
pub type __uint64_t = cty::c_ulong;
pub type __quad_t = cty::c_long;
pub type __u_quad_t = cty::c_ulong;
pub type __intmax_t = cty::c_long;
pub type __uintmax_t = cty::c_ulong;
pub type __dev_t = cty::c_ulong;
pub type __uid_t = cty::c_uint;
pub type __gid_t = cty::c_uint;
pub type __ino_t = cty::c_ulong;
pub type __ino64_t = cty::c_ulong;
pub type __mode_t = cty::c_uint;
pub type __nlink_t = cty::c_ulong;
pub type __off_t = cty::c_long;
pub type __off64_t = cty::c_long;
pub type __pid_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [cty::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = cty::c_long;
pub type __rlim_t = cty::c_ulong;
pub type __rlim64_t = cty::c_ulong;
pub type __id_t = cty::c_uint;
pub type __time_t = cty::c_long;
pub type __useconds_t = cty::c_uint;
pub type __suseconds_t = cty::c_long;
pub type __daddr_t = cty::c_int;
pub type __key_t = cty::c_int;
pub type __clockid_t = cty::c_int;
pub type __timer_t = *mut cty::c_void;
pub type __blksize_t = cty::c_long;
pub type __blkcnt_t = cty::c_long;
pub type __blkcnt64_t = cty::c_long;
pub type __fsblkcnt_t = cty::c_ulong;
pub type __fsblkcnt64_t = cty::c_ulong;
pub type __fsfilcnt_t = cty::c_ulong;
pub type __fsfilcnt64_t = cty::c_ulong;
pub type __fsword_t = cty::c_long;
pub type __ssize_t = cty::c_long;
pub type __syscall_slong_t = cty::c_long;
pub type __syscall_ulong_t = cty::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut cty::c_char;
pub type __intptr_t = cty::c_long;
pub type __socklen_t = cty::c_uint;
pub type __sig_atomic_t = cty::c_int;
pub type int_least8_t = cty::c_schar;
pub type int_least16_t = cty::c_short;
pub type int_least32_t = cty::c_int;
pub type int_least64_t = cty::c_long;
pub type uint_least8_t = cty::c_uchar;
pub type uint_least16_t = cty::c_ushort;
pub type uint_least32_t = cty::c_uint;
pub type uint_least64_t = cty::c_ulong;
pub type int_fast8_t = cty::c_schar;
pub type int_fast16_t = cty::c_long;
pub type int_fast32_t = cty::c_long;
pub type int_fast64_t = cty::c_long;
pub type uint_fast8_t = cty::c_uchar;
pub type uint_fast16_t = cty::c_ulong;
pub type uint_fast32_t = cty::c_ulong;
pub type uint_fast64_t = cty::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type pcm_sample_t = i16;
pub type adpcm_encode_output_cb_f =
    ::core::option::Option<unsafe extern "C" fn(output: u8, param: *mut cty::c_void)>;
pub type adpcm_decode_output_cb_f =
    ::core::option::Option<unsafe extern "C" fn(output: pcm_sample_t, param: *mut cty::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct adpcm_state_s {
    pub predicated: pcm_sample_t,
    pub index: i16,
}
#[test]
fn bindgen_test_layout_adpcm_state_s() {
    assert_eq!(
        ::core::mem::size_of::<adpcm_state_s>(),
        4usize,
        concat!("Size of: ", stringify!(adpcm_state_s))
    );
    assert_eq!(
        ::core::mem::align_of::<adpcm_state_s>(),
        2usize,
        concat!("Alignment of ", stringify!(adpcm_state_s))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<adpcm_state_s>())).predicated as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(adpcm_state_s),
            "::",
            stringify!(predicated)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<adpcm_state_s>())).index as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(adpcm_state_s),
            "::",
            stringify!(index)
        )
    );
}
pub type adpcm_state_t = adpcm_state_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct adpcm_enc_s {
    pub callback: adpcm_encode_output_cb_f,
    pub param: *mut cty::c_void,
    pub state: adpcm_state_t,
    pub output: u8,
    pub output_index: u8,
}
#[test]
fn bindgen_test_layout_adpcm_enc_s() {
    assert_eq!(
        ::core::mem::size_of::<adpcm_enc_s>(),
        24usize,
        concat!("Size of: ", stringify!(adpcm_enc_s))
    );
    assert_eq!(
        ::core::mem::align_of::<adpcm_enc_s>(),
        8usize,
        concat!("Alignment of ", stringify!(adpcm_enc_s))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<adpcm_enc_s>())).callback as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(adpcm_enc_s),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<adpcm_enc_s>())).param as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(adpcm_enc_s),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<adpcm_enc_s>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(adpcm_enc_s),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<adpcm_enc_s>())).output as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(adpcm_enc_s),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<adpcm_enc_s>())).output_index as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(adpcm_enc_s),
            "::",
            stringify!(output_index)
        )
    );
}
pub type adpcm_enc_t = adpcm_enc_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct adpcm_dec_s {
    pub callback: adpcm_decode_output_cb_f,
    pub param: *mut cty::c_void,
    pub state: adpcm_state_t,
}
#[test]
fn bindgen_test_layout_adpcm_dec_s() {
    assert_eq!(
        ::core::mem::size_of::<adpcm_dec_s>(),
        24usize,
        concat!("Size of: ", stringify!(adpcm_dec_s))
    );
    assert_eq!(
        ::core::mem::align_of::<adpcm_dec_s>(),
        8usize,
        concat!("Alignment of ", stringify!(adpcm_dec_s))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<adpcm_dec_s>())).callback as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(adpcm_dec_s),
            "::",
            stringify!(callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<adpcm_dec_s>())).param as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(adpcm_dec_s),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<adpcm_dec_s>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(adpcm_dec_s),
            "::",
            stringify!(state)
        )
    );
}
pub type adpcm_dec_t = adpcm_dec_s;
extern "C" {
    pub fn adpcm_enc_init(
        adpcm: *mut adpcm_enc_t,
        callback: adpcm_encode_output_cb_f,
        param: *mut cty::c_void,
    );
}
extern "C" {
    pub fn adpcm_dec_init(
        adpcm: *mut adpcm_dec_t,
        callback: adpcm_decode_output_cb_f,
        param: *mut cty::c_void,
    );
}
extern "C" {
    pub fn adpcm_encode(adpcm: *mut adpcm_enc_t, sample: pcm_sample_t);
}
extern "C" {
    pub fn adpcm_decode(adpcm: *mut adpcm_dec_t, data: u8);
}
