ING_SRC_INC=-I $(ING_REL)/src/BSP -I $(ING_REL)/src/FWlib -I $(ING_REL)/src/StartUP -I $(ING_REL)/src/Tools 
ING_BUNDLE_INC=-I $(ING_BUNDLE) -I $(ING_BUNDLE)/os -I $(ING_BUNDLE)/os/portable/GCC/ARM_CM3 -I $(CMSIS_INC)

# Selecting Core
CORTEX_M=3

# Use newlib-nano. To disable it, specify USE_NANO=
USE_NANO=--specs=nano.specs

# Use seimhosting or not
USE_SEMIHOST=--specs=rdimon.specs
USE_NOHOST=--specs=nosys.specs

CORE=CM$(CORTEX_M)

# Compiler & Linker
CC=arm-none-eabi-gcc
CXX=arm-none-eabi-g++
OBJCOPY=arm-none-eabi-objcopy

# Options for specific architecture
ARCH_FLAGS=-mthumb -mcpu=cortex-m$(CORTEX_M)

# Startup code
STARTUP=src/gstartup_ing91800.s

CFLAGS=$(ARCH_FLAGS) $(STARTUP_DEFS) $(ING_SRC_INC) $(ING_BUNDLE_INC) -D USE_STDPERIPH_DRIVER  -Os -flto -ffunction-sections -fdata-sections
CXXFLAGS=$(CFLAGS)

# Need following option for LTO as LTO will treat retarget functions as
# unused without following option
CFLAGS+=-fno-builtin

# Link for code size
GC=-Wl,--gc-sections

# Create map file
MAP=-Wl,-Map=$(APPNAME).map

STARTUP_DEFS=-D__STARTUP_CLEAR_BSS

LDSCRIPTS=-L. -T $(APPNAME).ld
LFLAGS=$(USE_NANO) $(USE_NOHOST) $(LDSCRIPTS) $(SYMDEFS) $(GC) $(MAP)

# to enable float point value printf
# LFLAGS+=-u _printf_float

$(APPNAME).bin:$(APPNAME).axf
	$(OBJCOPY) -v -O binary $^ $@

$(APPNAME).axf: $(PROJECT_FILES)  $(STARTUP)
	$(CC) $^ $(CFLAGS) $(LFLAGS) -o $@

clean: 
	rm -f $(APPNAME).axf $(APPNAME).bin *.map *.o 

rebuild: clean $(APPNAME).bin
