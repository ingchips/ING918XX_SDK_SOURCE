# Copyright (c) 2013-2019 Huawei Technologies Co., Ltd. All rights reserved.
# Copyright (c) 2020-2021 Huawei Device Co., Ltd. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of
#    conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list
#    of conditions and the following disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used
#    to endorse or promote products derived from this software without specific prior written
#    permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import("//build/lite/config/component/lite_component.gni")

LITEOS_MENUCONFIG_H = rebase_path("$root_out_dir/config.h")

liteos_config_file = "${ohos_build_type}.config"

liteos_config_file =
    rebase_path(liteos_config_file, "", "$product_path/kernel_configs")
print("liteos_config_file:", liteos_config_file)

exec_script("//build/lite/run_shell_cmd.py",
            [ "env" + " CONFIG_=LOSCFG_" + " KCONFIG_CONFIG_HEADER='y=true'" +
                  " KCONFIG_CONFIG=$liteos_config_file" +
                  " BOARD_COMPANY=$device_company" +
                  " DEVICE_PATH=$device_path" + " srctree=" + rebase_path(".") +
                  " genconfig" + " --header-path $LITEOS_MENUCONFIG_H" +
                  " --file-list kconfig_files.txt" +
                  " --env-list kconfig_env.txt" + " --config-out config.gni" ],
            "",
            [ liteos_config_file ])

import("$root_out_dir/config.gni")

LITEOSTOPDIR = "//kernel/liteos_m"
HDFTOPDIR = "//drivers/hdf_core/adapter/khdf/liteos_m"
THIRDPARTY_BOUNDS_CHECKING_FUNCTION_DIR =
    "//third_party/bounds_checking_function"
LITEOSTHIRDPARTY = "//third_party"
THIRDPARTY_FATFS_DIR = "//third_party/FatFs"
THIRDPARTY_MUSL_DIR = "//third_party/musl"
THIRDPARTY_LITTLEFS_DIR = "//third_party/littlefs"
THIRDPARTY_CMSIS_DIR = "//third_party/cmsis"
THIRDPARTY_LWIP_DIR = "//third_party/lwip"
DEVICE_BOARD_DIR = "//device/board"
DEVICE_SOC_DIR = "//device/soc"
COMMONLIBRARY_UTILS_LITE_DIR = "//commonlibrary/utils_lite"
TEST_XTS_TOOLS_DIR = "//test/xts/tools"

ARCH = ""
if (defined(LOSCFG_ARCH_ARM_AARCH32)) {
  ARCH = "arm"
} else if (defined(LOSCFG_ARCH_ARM_AARCH64)) {
  ARCH = "aarch64"
} else if (defined(LOSCFG_ARCH_RISCV32)) {
  ARCH = "rv32imac"
} else if (defined(LOSCFG_ARCH_CSKY)) {
  ARCH = "csky"
} else if (defined(LOSCFG_ARCH_XTENSA)) {
  ARCH = "xtensa"
}

template("kernel_module") {
  build_gn = rebase_path("BUILD.gn")
  cmd = "grep -c '^\s*\(kernel_module\|hdf_driver\)\s*(\s*\S*\s*)\s*{\s*\$' $build_gn"
  modules_count = exec_script("//build/lite/run_shell_cmd.py", [ cmd ], "value")
  if (modules_count == 1) {
    auto_config = true
  }

  cmd = "if grep -q '^\s*\(config\s*(\s*\"public\"\s*)\|module_group\s*(\s*\"\S*\"\s*)\)\s*{\s*\$' $build_gn; then echo true; else echo false; fi"
  has_public_config =
      exec_script("//build/lite/run_shell_cmd.py", [ cmd ], "value")
  if (!has_public_config && defined(auto_config)) {
    config("public") {
      configs = []
    }
  }

  current_dir_name = get_path_info(rebase_path("."), "file")
  if (target_name != current_dir_name) {
    cmd = "if grep -q '^\s*\(module_group\|group\)\s*(\s*\"$current_dir_name\"\s*)\s*{\s*\$' $build_gn; then echo true; else echo false; fi"
    has_current_dir_group =
        exec_script("//build/lite/run_shell_cmd.py", [ cmd ], "value")
    if (!has_current_dir_group && defined(auto_config)) {
      module_name = target_name
      group(current_dir_name) {
        public_deps = [ ":$module_name" ]
      }
    }
  }

  if (defined(invoker.module_switch) && !invoker.module_switch) {
    group(target_name) {
      not_needed(invoker, "*")
    }
  } else {
    source_set(target_name) {
      public_configs = []
      forward_variables_from(invoker, "*", [ "configs" ])
      configs += invoker.configs
      if (has_public_config) {
        included_public_config = false
        foreach(cfg, public_configs) {
          what = "label_no_toolchain"
          if (get_label_info(cfg, what) == get_label_info(":public", what)) {
            included_public_config = true
          }
        }
        if (!included_public_config) {
          public_configs += [ ":public" ]
        }
      }
    }
  }
  not_needed([ "auto_config" ])
}

template("config") {
  config(target_name) {
    if (defined(invoker.module_switch) && !invoker.module_switch &&
        target_name == "public") {
      not_needed(invoker, "*")
      forward_variables_from(invoker, [ "configs" ])
    } else {
      forward_variables_from(invoker, "*")
    }
  }
}

template("module_group") {
  assert(defined(invoker.modules), "modules are must")
  group(target_name) {
    deps = []
    foreach(m, invoker.modules) {
      deps += [ m ]
    }
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
  }
  config("public") {
    configs = []
    foreach(m, invoker.modules) {
      configs += [ "$m:public" ]
    }
    if (defined(invoker.configs)) {
      configs += invoker.configs
    }
  }
}

set_defaults("kernel_module") {
  configs = [
    "$LITEOSTOPDIR:public",
    "$LITEOSTOPDIR:los_config",
  ]
  visibility = [
    ":*",
    "$LITEOSTOPDIR:*",
    "..:*",
    "../..:*",
  ]
}
