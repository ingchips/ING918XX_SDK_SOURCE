ING_SRC_INC=-I src -I $(ING_REL)/src/BSP -I $(ING_REL)/src/FWlib -I $(ING_REL)/src/StartUP/ing918 -I $(ING_REL)/src/Tools -I $(ING_REL)/src
ING_BUNDLE_INC=-I $(ING_BUNDLE) -I $(ING_BUNDLE)/os -I $(CMSIS_INC)

LIB_INC=$(ING_SRC_INC:-I=-L)

OBJ_PATH=obj

APP_O_FILES = $(addprefix $(OBJ_PATH)/,$(notdir $(PROJECT_FILES:.c=.o) $(STARTUP:.s=.o)))
APP_O_FILES += $(addprefix $(OBJ_PATH)/,$(notdir $(ZIG_FILES:.zig=.o)))

MAP_FILE=$(OBJ_PATH)/$(APPNAME).map

STARTUP_DEFS=-D__STARTUP_CLEAR_BSS

# Use newlib-nano. To disable it, specify USE_NANO=
USE_NANO=--specs=nano.specs

# Use seimhosting or not
USE_SEMIHOST=--specs=rdimon.specs
USE_NOHOST=--specs=nosys.specs

# Options for specific architecture
ARCH_FLAGS=-mthumb -mcpu=cortex-m3

PREFIX	 = @arm-none-eabi-
CC      := $(PREFIX)gcc
AS      := $(PREFIX)as
CXX     := $(PREFIX)g++
AR      := $(PREFIX)gcc-ar
NM      := $(PREFIX)gcc-nm
OBJCOPY := $(PREFIX)objcopy
OBJDUMP := $(PREFIX)objdump
SIZE    := $(PREFIX)size
RANLIB  := $(PREFIX)gcc-ranlib
ZIG     := zig

CFLAGS+=$(ARCH_FLAGS) $(STARTUP_DEFS) $(ING_SRC_INC) $(ING_BUNDLE_INC) $(APPDEFS) -fshort-wchar -Os -flto -ffunction-sections -fdata-sections
CXXFLAGS=$(CFLAGS)
ASFLAGS=$(CFLAGS)

ZCFLAGS+= -target thumb-freestanding-none $(ING_SRC_INC) $(ING_BUNDLE_INC) --cache-dir obj -mcpu cortex_m3

# Need following option for LTO as LTO will treat retarget functions as
# unused without following option
CFLAGS+=-fno-builtin

# Link for code size
GC=-Wl,--gc-sections

# Create map file
MAP=-Wl,-Map=$(MAP_FILE)

LDSCRIPTS=-L. -T $(APPNAME).ld
LFLAGS+=$(USE_NANO) $(USE_NOHOST) $(LDSCRIPTS) $(SYMDEFS) $(GC) $(MAP) -Wl,--no-wchar-size-warning -g

# to enable float point value printf
# LFLAGS+=-u _printf_float

$(APPNAME).bin:$(APPNAME).axf
	$(OBJCOPY) -v -O binary $< $@

$(APPNAME).axf: $(OBJ_PATH) $(APP_O_FILES)
	$(info LINK)
	$(CC) -o $@ $(APP_O_FILES) -L $(ING_REL)/src/Tools -l:ing918_uecc.lib $(LFLAGS) $(CFLAGS)
	$(SIZE) $@

$(OBJ_PATH)/%.o: src/%.s
	$(info ASM $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: src/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: src/%.zig
	$(info ZIG $<)
	$(ZIG) build-obj $(ZCFLAGS) -femit-bin=$@ $<
	$(info done)

$(OBJ_PATH)/%.o: $(ING_REL)/src/BSP/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: $(ING_REL)/src/FWlib/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: $(ING_REL)/src/StartUp/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: $(ING_REL)/src/Tools/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

ifeq ($(OS),Windows_NT)
$(OBJ_PATH):
	cmd /C mkdir $(OBJ_PATH)

clean:
	cmd /C del /F /Q /S $(OBJ_PATH)
	cmd /C del /F /Q $(APPNAME).axf $(APPNAME).bin

else
$(OBJ_PATH):
	mkdir $(OBJ_PATH)

clean:
	rm -rf $(APPNAME).axf $(APPNAME).bin $(APP_O_FILES) $(MAP_FILE) $(OBJ_PATH)/*.* $(OBJ_PATH)/*/*.*
endif

rebuild: clean $(APPNAME).bin

