ING_SRC_INC=-I $(ING_REL)/src/BSP -I $(ING_REL)/src/FWlib -I $(ING_REL)/src/StartUP -I $(ING_REL)/src/Tools 
ING_BUNDLE_INC=-I $(ING_BUNDLE) -I $(ING_BUNDLE)/os -I $(ING_BUNDLE)/os/portable/GCC/ARM_CM3 -I $(CMSIS_INC)
NIM_LIB_INC=-I "$(NIM_PATH)/../lib"

NIM_SRC_INC=$(subst -I ,-p:,$(ING_SRC_INC))
NIM_BUNDLE_INC=$(subst -I ,-p:,$(ING_BUNDLE_INC))

OBJ_PATH=obj
NIM_CACHE_PATH=nimcache

PROJ_N2C_FILES = $(wildcard $(NIM_CACHE_PATH)/*.c)

PROJECT_FILES = $(PROJ_C_FILES) $(PROJ_N2C_FILES)
APP_O_FILES = $(addprefix $(OBJ_PATH)/,$(notdir $(PROJECT_FILES:.c=.o) $(STARTUP:.s=.o)))

MAP_FILE=$(OBJ_PATH)/$(APPNAME).map

STARTUP_DEFS=-D__STARTUP_CLEAR_BSS

# Use newlib-nano. To disable it, specify USE_NANO=
USE_NANO=--specs=nano.specs

# Use seimhosting or not
USE_SEMIHOST=--specs=rdimon.specs
USE_NOHOST=--specs=nosys.specs

# Options for specific architecture
ARCH_FLAGS=-mthumb -mcpu=cortex-m3

PREFIX	 = @arm-none-eabi-
CC      := $(PREFIX)gcc
AS      := $(PREFIX)as
CXX     := $(PREFIX)g++
DBG     := $(PREFIX)gdb
AR      := $(PREFIX)gcc-ar
NM      := $(PREFIX)gcc-nm
OBJCOPY := $(PREFIX)objcopy
OBJDUMP := $(PREFIX)objdump
SIZE    := $(PREFIX)size
RANLIB  := $(PREFIX)gcc-ranlib

CFLAGS=$(ARCH_FLAGS) $(STARTUP_DEFS) $(ING_SRC_INC) $(ING_BUNDLE_INC) $(NIM_LIB_INC) $(APPDEFS)  -Os -flto -ffunction-sections -fdata-sections

# Need following option for LTO as LTO will treat retarget functions as
# unused without following option
CFLAGS+=-fno-builtin

CXXFLAGS=$(CFLAGS)
ASFLAGS=$(CFLAGS)

NIMFLAGS=--compileOnly --noMain --noLinking --nimcache:$(NIM_CACHE_PATH)
# Link for code size
GC=-Wl,--gc-sections

# Create map file
MAP=-Wl,-Map=$(MAP_FILE)

LDSCRIPTS=-L. -T $(APPNAME).ld
LFLAGS=$(ARCH_FLAGS) $(USE_NANO) $(USE_NOHOST) $(LDSCRIPTS) $(SYMDEFS) $(GC) $(MAP)

# to enable float point value printf
# LFLAGS+=-u _printf_float

.PHONY: clean
.PHONY: nimcache
.PHONY: all
.PHONY: debug

all: buildcache
	$(MAKE) $(APPNAME).bin

$(APPNAME).bin:$(APPNAME).axf
	$(OBJCOPY) -v -O binary $< $@

$(APPNAME).axf: $(OBJ_PATH) $(APP_O_FILES)
	$(info LINKING)
	$(CC) -o $@ $(APP_O_FILES) $(LFLAGS)

$(OBJ_PATH)/%.o: src/%.s
	$(info ASM $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: src/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.nim.o: $(NIM_CACHE_PATH)/%.nim.c
	$(info CC $<)
	$(CC) $(CFLAGS) -w -c -o $@ $<

$(OBJ_PATH)/%.o: $(ING_REL)/src/BSP/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<
	
$(OBJ_PATH)/%.o: $(ING_REL)/src/FWlib/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

$(OBJ_PATH)/%.o: $(ING_REL)/src/StartUp/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<
	
$(OBJ_PATH)/%.o: $(ING_REL)/src/Tools/%.c
	$(info CC $<)
	$(CC) $(CFLAGS) -c -o $@ $<

buildcache:
	nim c $(NIMFLAGS) src/main.nim

ifeq ($(OS),Windows_NT)
$(OBJ_PATH):
	cmd /C mkdir $(OBJ_PATH)
	
clean: 
	rm -f $(APPNAME).axf $(APPNAME).bin $(APP_O_FILES) $(MAP_FILE) $(OBJ_PATH)/*.o
	rm -f $(NIM_CACHE_PATH)/*.*
else	
$(OBJ_PATH):
	mkdir $(OBJ_PATH)
	
clean: 
	rm -f $(APPNAME).axf $(APPNAME).bin $(APP_O_FILES) $(MAP_FILE) $(OBJ_PATH)/*.o
	rm -f $(NIM_CACHE_PATH)/*.*
endif

rebuild: clean all

debug:
	$(DBG) $(APPNAME).axf