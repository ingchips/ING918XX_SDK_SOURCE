#if (INGCHIPS_FAMILY == INGCHIPS_FAMILY_916)
void cube_soc_init(void)
{
platform_config(PLATFORM_CFG_RT_OSC_EN, PLATFORM_CFG_DISABLE);
platform_config(PLATFORM_CFG_RT_CLK_ACC, 500);
SYSCTRL_ConfigPLLClk(5, 42, 1);
SYSCTRL_SelectHClk(SYSCTRL_CLK_PLL_DIV_1 + 0);
}
#elif (INGCHIPS_FAMILY == INGCHIPS_FAMILY_920)
void cube_soc_init(void)
{
}
#endif

void cube_setup_peripherals(void)
{
SYSCTRL_ClearClkGateMulti((1 << SYSCTRL_ITEM_APB_PinCtrl)
 | (1 << SYSCTRL_ITEM_APB_UART0));

SYSCTRL_SetPClkDiv(2);

// SYSCTRL_SelectUsedDmaItems(...)

// UART0
// PINCTRL_SetPadMux(1, 20)
{
    APB_UART0->Control = 0;
    APB_UART0->IntClear = 0;
    APB_UART0->IntMask = 0;
    APB_UART0->StatusClear = 0;
    APB_UART0->IntBaudDivisor = 13;
    APB_UART0->FractBaudDivisor = 1;
    APB_UART0->LineCon_H = ( ((UART_PARITY_NOT_CHECK >> 2) & 1) << bsUART_STICK_PARITY ) |  // SPS
                        (   3      << bsUART_WORD_LENGTH  ) |  // WLEN
                        (   1      << bsUART_FIFO_ENABLE  ) |  // FEN
                        (   0      << bsUART_TWO_STOP_BITS) |  // STP2
                        ( ( UART_PARITY_NOT_CHECK & 3) << bsUART_PARITY_SELECT) ;  // EPS, EPN
    APB_UART0->FifoSelect = (1 << bsUART_TRANS_INT_LEVEL ) |
                     (1 << bsUART_RECV_INT_LEVEL  ) ;
    APB_UART0->IntMask = (0 << bsUART_RECEIVE_INTENAB) | (0 << bsUART_TRANSMIT_INTENAB);
    APB_UART0->Control = 0 << bsUART_RECEIVE_ENABLE |
                  1 << bsUART_TRANSMIT_ENABLE |
                  1 << bsUART_ENABLE          |
                  0 << bsUART_CTS_ENA         |
                  0 << bsUART_RTS_ENA;
}

// dump PINCTRL registers
}
